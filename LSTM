from google.colab import drive
import numpy as np
import pandas as pd

path = '/content/train_dataset_new.csv'
df = pd.read_csv(path)
df = df.drop(labels = 'Unnamed: 0', axis = 1)

df.head()
X = []
y = []

for i, r in df.iterrows():
  X.append([int(j) for j in str(r['sim_number'])])
  y.append(r["sim_price_range"])

X, y = np.array(X), np.array(y)

from numpy import array
from numpy import argmax
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
# integer encode
label_encoder = LabelEncoder()
integer_encoded = label_encoder.fit_transform(y) 
# binary encode
onehot_encoder = OneHotEncoder(sparse=False)
integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)
y_one_hot = onehot_encoder.fit_transform(integer_encoded)
print(y_one_hot) 

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y_one_hot, test_size=0.2, random_state=42)

X_train.shape

y_train.shape

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import SimpleRNN
from keras.layers import Dropout
from keras.layers import LSTM

regressor = Sequential()

regressor.add(
    LSTM(units = 64, 
              return_sequences = True, 
              input_shape = (X_train.shape[1],1))
             )
regressor.add(
    Dropout(0.2)
             )
regressor.add(
    LSTM(units = 32, 
              return_sequences = True)
             )
regressor.add(
    Dropout(0.2)
             )
regressor.add(
    LSTM(units = 16, 
              return_sequences = True)
             )
regressor.add(
    Dropout(0.2)
             )
regressor.add(
    LSTM(units = 8)
             )
regressor.add(
    Dropout(0.2)
             )
regressor.add (Dense(units=6, activation = "softmax"))

regressor.compile(
    optimizer = "adam", 
    loss = "categorical_crossentropy",
    metrics = ["accuracy"])

from tensorflow.keras.callbacks import ModelCheckpoint
model_checkpoint_callback = ModelCheckpoint(
    filepath="ckpt_best.hdf5",
    save_weights_only=True,
    monitor='val_accuracy',
    save_best_only=True, verbose=1)

history = regressor.fit(X_train, y_train, epochs = 10, batch_size = 64, validation_data = (X_test, y_test), callbacks = [model_checkpoint_callback])

test = pd.read_csv('/content/test.csv')

test.head()
test.info()
T = []
for i, r in test.iterrows():
  T.append([int(j) for j in str(r['sim_number'])])
T = np.array(T)
T.shape
r = []
result = regressor.predict(T)
result.shape

index = []
for i in result:
  z = np.argmax(i)
  index.append(z)
test['sim_price_range'] = index
test.head()
test.to_csv('/content/t.csv')
big_price = test[test['sim_price_range'] == 0 ]
big_price.head()
big_price.to_csv('/content/big_price_test.csv')
